
tft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a58  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003424  08003424  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003424  08003424  00013424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800342c  0800342c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000014  08003448  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08003448  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a631  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a9b  00000000  00000000  0002a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0002c158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002133c  00000000  00000000  0002ca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bce7  00000000  00000000  0004ddbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c99df  00000000  00000000  00059aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000006fb  00000000  00000000  00123482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024bc  00000000  00000000  00123b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0012603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002c04 	.word	0x08002c04

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08002c04 	.word	0x08002c04

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fced 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f81f 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f8ed 	bl	80006ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000512:	f000 f8c1 	bl	8000698 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000516:	f000 f887 	bl	8000628 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 800051a:	f000 fa43 	bl	80009a4 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fb90 	bl	8000c44 <ST7735_FillScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ST7735_WriteString(0,80,"Hello World",Font_7x10,ST7735_WHITE,ST7735_BLACK);
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <main+0x44>)
 8000526:	2200      	movs	r2, #0
 8000528:	9202      	str	r2, [sp, #8]
 800052a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800052e:	9201      	str	r2, [sp, #4]
 8000530:	685a      	ldr	r2, [r3, #4]
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a04      	ldr	r2, [pc, #16]	; (8000548 <main+0x48>)
 8000538:	2150      	movs	r1, #80	; 0x50
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fac3 	bl	8000ac6 <ST7735_WriteString>
 8000540:	e7f0      	b.n	8000524 <main+0x24>
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	08002c1c 	.word	0x08002c1c

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	2234      	movs	r2, #52	; 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fb26 	bl	8002bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b2a      	ldr	r3, [pc, #168]	; (8000620 <SystemClock_Config+0xd4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a29      	ldr	r2, [pc, #164]	; (8000620 <SystemClock_Config+0xd4>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <SystemClock_Config+0xd4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <SystemClock_Config+0xd8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000598:	4a22      	ldr	r2, [pc, #136]	; (8000624 <SystemClock_Config+0xd8>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <SystemClock_Config+0xd8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005c0:	2310      	movs	r3, #16
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ca:	2304      	movs	r3, #4
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 faf6 	bl	8001bcc <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005e6:	f000 f8ef 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f000 ff96 	bl	8001538 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000612:	f000 f8d9 	bl	80007c8 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_SPI2_Init+0x68>)
 800062e:	4a19      	ldr	r2, [pc, #100]	; (8000694 <MX_SPI2_Init+0x6c>)
 8000630:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_SPI2_Init+0x68>)
 8000634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000638:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_SPI2_Init+0x68>)
 800063c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000640:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_SPI2_Init+0x68>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_SPI2_Init+0x68>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_SPI2_Init+0x68>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_SPI2_Init+0x68>)
 8000656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_SPI2_Init+0x68>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_SPI2_Init+0x68>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_SPI2_Init+0x68>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_SPI2_Init+0x68>)
 8000670:	2200      	movs	r2, #0
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_SPI2_Init+0x68>)
 8000676:	220a      	movs	r2, #10
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_SPI2_Init+0x68>)
 800067c:	f001 fd44 	bl	8002108 <HAL_SPI_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000686:	f000 f89f 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000030 	.word	0x20000030
 8000694:	40003800 	.word	0x40003800

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_USART2_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f001 ffaa 	bl	8002628 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 f875 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000088 	.word	0x20000088
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a2c      	ldr	r2, [pc, #176]	; (80007bc <MX_GPIO_Init+0xd0>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a25      	ldr	r2, [pc, #148]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2120      	movs	r1, #32
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MX_GPIO_Init+0xd4>)
 8000778:	f000 fec4 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000782:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <MX_GPIO_Init+0xd8>)
 8000794:	f000 fd22 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000798:	2320      	movs	r3, #32
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_GPIO_Init+0xd4>)
 80007b0:	f000 fd14 	bl	80011dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	; 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020000 	.word	0x40020000
 80007c4:	40020800 	.word	0x40020800

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2140      	movs	r1, #64	; 0x40
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <ST7735_Select+0x14>)
 80007de:	f000 fe91 	bl	8001504 <HAL_GPIO_WritePin>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020400 	.word	0x40020400

080007ec <ST7735_Unselect>:

void ST7735_Unselect() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2140      	movs	r1, #64	; 0x40
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <ST7735_Unselect+0x14>)
 80007f6:	f000 fe85 	bl	8001504 <HAL_GPIO_WritePin>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40020400 	.word	0x40020400

08000804 <ST7735_Reset>:

static void ST7735_Reset() {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	4806      	ldr	r0, [pc, #24]	; (8000828 <ST7735_Reset+0x24>)
 800080e:	f000 fe79 	bl	8001504 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000812:	2005      	movs	r0, #5
 8000814:	f000 fbd8 	bl	8000fc8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <ST7735_Reset+0x24>)
 800081e:	f000 fe71 	bl	8001504 <HAL_GPIO_WritePin>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40020800 	.word	0x40020800

0800082c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083c:	4806      	ldr	r0, [pc, #24]	; (8000858 <ST7735_WriteCommand+0x2c>)
 800083e:	f000 fe61 	bl	8001504 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000842:	1df9      	adds	r1, r7, #7
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
 8000848:	2201      	movs	r2, #1
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <ST7735_WriteCommand+0x30>)
 800084c:	f001 fce5 	bl	800221a <HAL_SPI_Transmit>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40020000 	.word	0x40020000
 800085c:	20000030 	.word	0x20000030

08000860 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000870:	4807      	ldr	r0, [pc, #28]	; (8000890 <ST7735_WriteData+0x30>)
 8000872:	f000 fe47 	bl	8001504 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b29a      	uxth	r2, r3
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <ST7735_WriteData+0x34>)
 8000882:	f001 fcca 	bl	800221a <HAL_SPI_Transmit>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40020000 	.word	0x40020000
 8000894:	20000030 	.word	0x20000030

08000898 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80008aa:	e034      	b.n	8000916 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80008b6:	7afb      	ldrb	r3, [r7, #11]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ffb7 	bl	800082c <ST7735_WriteCommand>

        numArgs = *addr++;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80008c8:	7abb      	ldrb	r3, [r7, #10]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80008d2:	7abb      	ldrb	r3, [r7, #10]
 80008d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008d8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80008da:	7abb      	ldrb	r3, [r7, #10]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d008      	beq.n	80008f2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80008e0:	7abb      	ldrb	r3, [r7, #10]
 80008e2:	4619      	mov	r1, r3
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ffbb 	bl	8000860 <ST7735_WriteData>
            addr += numArgs;
 80008ea:	7abb      	ldrb	r3, [r7, #10]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	4413      	add	r3, r2
 80008f0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80008f2:	89bb      	ldrh	r3, [r7, #12]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d00e      	beq.n	8000916 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000902:	89bb      	ldrh	r3, [r7, #12]
 8000904:	2bff      	cmp	r3, #255	; 0xff
 8000906:	d102      	bne.n	800090e <ST7735_ExecuteCommandList+0x76>
 8000908:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800090c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800090e:	89bb      	ldrh	r3, [r7, #12]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fb59 	bl	8000fc8 <HAL_Delay>
    while(numCommands--) {
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	1e5a      	subs	r2, r3, #1
 800091a:	73fa      	strb	r2, [r7, #15]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1c5      	bne.n	80008ac <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800092a:	b590      	push	{r4, r7, lr}
 800092c:	b085      	sub	sp, #20
 800092e:	af00      	add	r7, sp, #0
 8000930:	4604      	mov	r4, r0
 8000932:	4608      	mov	r0, r1
 8000934:	4611      	mov	r1, r2
 8000936:	461a      	mov	r2, r3
 8000938:	4623      	mov	r3, r4
 800093a:	71fb      	strb	r3, [r7, #7]
 800093c:	4603      	mov	r3, r0
 800093e:	71bb      	strb	r3, [r7, #6]
 8000940:	460b      	mov	r3, r1
 8000942:	717b      	strb	r3, [r7, #5]
 8000944:	4613      	mov	r3, r2
 8000946:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000948:	202a      	movs	r0, #42	; 0x2a
 800094a:	f7ff ff6f 	bl	800082c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800094e:	2300      	movs	r3, #0
 8000950:	733b      	strb	r3, [r7, #12]
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	3302      	adds	r3, #2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	737b      	strb	r3, [r7, #13]
 800095a:	2300      	movs	r3, #0
 800095c:	73bb      	strb	r3, [r7, #14]
 800095e:	797b      	ldrb	r3, [r7, #5]
 8000960:	3302      	adds	r3, #2
 8000962:	b2db      	uxtb	r3, r3
 8000964:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2104      	movs	r1, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff77 	bl	8000860 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000972:	202b      	movs	r0, #43	; 0x2b
 8000974:	f7ff ff5a 	bl	800082c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000978:	79bb      	ldrb	r3, [r7, #6]
 800097a:	3303      	adds	r3, #3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000980:	793b      	ldrb	r3, [r7, #4]
 8000982:	3303      	adds	r3, #3
 8000984:	b2db      	uxtb	r3, r3
 8000986:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2104      	movs	r1, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff66 	bl	8000860 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000994:	202c      	movs	r0, #44	; 0x2c
 8000996:	f7ff ff49 	bl	800082c <ST7735_WriteCommand>
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd90      	pop	{r4, r7, pc}
	...

080009a4 <ST7735_Init>:

void ST7735_Init() {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
    ST7735_Select();
 80009a8:	f7ff ff14 	bl	80007d4 <ST7735_Select>
    ST7735_Reset();
 80009ac:	f7ff ff2a 	bl	8000804 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80009b0:	4806      	ldr	r0, [pc, #24]	; (80009cc <ST7735_Init+0x28>)
 80009b2:	f7ff ff71 	bl	8000898 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <ST7735_Init+0x2c>)
 80009b8:	f7ff ff6e 	bl	8000898 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <ST7735_Init+0x30>)
 80009be:	f7ff ff6b 	bl	8000898 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80009c2:	f7ff ff13 	bl	80007ec <ST7735_Unselect>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08003394 	.word	0x08003394
 80009d0:	080033d0 	.word	0x080033d0
 80009d4:	080033e0 	.word	0x080033e0

080009d8 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009d8:	b082      	sub	sp, #8
 80009da:	b590      	push	{r4, r7, lr}
 80009dc:	b089      	sub	sp, #36	; 0x24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
 80009e2:	4603      	mov	r3, r0
 80009e4:	80fb      	strh	r3, [r7, #6]
 80009e6:	460b      	mov	r3, r1
 80009e8:	80bb      	strh	r3, [r7, #4]
 80009ea:	4613      	mov	r3, r2
 80009ec:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	b2d8      	uxtb	r0, r3
 80009f2:	88bb      	ldrh	r3, [r7, #4]
 80009f4:	b2d9      	uxtb	r1, r3
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80009fe:	4413      	add	r3, r2
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	3b01      	subs	r3, #1
 8000a04:	b2dc      	uxtb	r4, r3
 8000a06:	88bb      	ldrh	r3, [r7, #4]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a0e:	4413      	add	r3, r2
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	3b01      	subs	r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4622      	mov	r2, r4
 8000a18:	f7ff ff87 	bl	800092a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	e043      	b.n	8000aaa <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	3b20      	subs	r3, #32
 8000a28:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000a2c:	fb01 f303 	mul.w	r3, r1, r3
 8000a30:	4619      	mov	r1, r3
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	440b      	add	r3, r1
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	e029      	b.n	8000a98 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d00e      	beq.n	8000a72 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	743b      	strb	r3, [r7, #16]
 8000a5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fef8 	bl	8000860 <ST7735_WriteData>
 8000a70:	e00f      	b.n	8000a92 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a76:	0a1b      	lsrs	r3, r3, #8
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	733b      	strb	r3, [r7, #12]
 8000a7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fee7 	bl	8000860 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	3301      	adds	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
 8000a98:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d3cf      	bcc.n	8000a44 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000aae:	461a      	mov	r2, r3
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d3b5      	bcc.n	8000a22 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	3724      	adds	r7, #36	; 0x24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ac2:	b002      	add	sp, #8
 8000ac4:	4770      	bx	lr

08000ac6 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af04      	add	r7, sp, #16
 8000ace:	603a      	str	r2, [r7, #0]
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000ada:	f7ff fe7b 	bl	80007d4 <ST7735_Select>

    while(*str) {
 8000ade:	e02d      	b.n	8000b3c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	7d3a      	ldrb	r2, [r7, #20]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae8:	dd13      	ble.n	8000b12 <ST7735_WriteString+0x4c>
            x = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000aee:	7d7b      	ldrb	r3, [r7, #21]
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	7d7a      	ldrb	r2, [r7, #21]
 8000afc:	4413      	add	r3, r2
 8000afe:	2b7f      	cmp	r3, #127	; 0x7f
 8000b00:	dc21      	bgt.n	8000b46 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b20      	cmp	r3, #32
 8000b08:	d103      	bne.n	8000b12 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	603b      	str	r3, [r7, #0]
                continue;
 8000b10:	e014      	b.n	8000b3c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	781a      	ldrb	r2, [r3, #0]
 8000b16:	88b9      	ldrh	r1, [r7, #4]
 8000b18:	88f8      	ldrh	r0, [r7, #6]
 8000b1a:	8c3b      	ldrh	r3, [r7, #32]
 8000b1c:	9302      	str	r3, [sp, #8]
 8000b1e:	8bbb      	ldrh	r3, [r7, #28]
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f7ff ff56 	bl	80009d8 <ST7735_WriteChar>
        x += font.width;
 8000b2c:	7d3b      	ldrb	r3, [r7, #20]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	4413      	add	r3, r2
 8000b34:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1cd      	bne.n	8000ae0 <ST7735_WriteString+0x1a>
 8000b44:	e000      	b.n	8000b48 <ST7735_WriteString+0x82>
                break;
 8000b46:	bf00      	nop
    }

    ST7735_Unselect();
 8000b48:	f7ff fe50 	bl	80007ec <ST7735_Unselect>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b56:	b002      	add	sp, #8
 8000b58:	4770      	bx	lr
	...

08000b5c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4604      	mov	r4, r0
 8000b64:	4608      	mov	r0, r1
 8000b66:	4611      	mov	r1, r2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	80fb      	strh	r3, [r7, #6]
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80bb      	strh	r3, [r7, #4]
 8000b72:	460b      	mov	r3, r1
 8000b74:	807b      	strh	r3, [r7, #2]
 8000b76:	4613      	mov	r3, r2
 8000b78:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b7e:	d858      	bhi.n	8000c32 <ST7735_FillRectangle+0xd6>
 8000b80:	88bb      	ldrh	r3, [r7, #4]
 8000b82:	2b7f      	cmp	r3, #127	; 0x7f
 8000b84:	d855      	bhi.n	8000c32 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000b86:	88fa      	ldrh	r2, [r7, #6]
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	2b80      	cmp	r3, #128	; 0x80
 8000b8e:	dd03      	ble.n	8000b98 <ST7735_FillRectangle+0x3c>
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000b96:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000b98:	88ba      	ldrh	r2, [r7, #4]
 8000b9a:	883b      	ldrh	r3, [r7, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	2b80      	cmp	r3, #128	; 0x80
 8000ba0:	dd03      	ble.n	8000baa <ST7735_FillRectangle+0x4e>
 8000ba2:	88bb      	ldrh	r3, [r7, #4]
 8000ba4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000ba8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000baa:	f7ff fe13 	bl	80007d4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	b2d8      	uxtb	r0, r3
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	b2d9      	uxtb	r1, r3
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	b2dc      	uxtb	r4, r3
 8000bc6:	88bb      	ldrh	r3, [r7, #4]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	883b      	ldrh	r3, [r7, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4622      	mov	r2, r4
 8000bd8:	f7ff fea7 	bl	800092a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000bdc:	8c3b      	ldrh	r3, [r7, #32]
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	733b      	strb	r3, [r7, #12]
 8000be6:	8c3b      	ldrh	r3, [r7, #32]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <ST7735_FillRectangle+0xe0>)
 8000bf4:	f000 fc86 	bl	8001504 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000bf8:	883b      	ldrh	r3, [r7, #0]
 8000bfa:	80bb      	strh	r3, [r7, #4]
 8000bfc:	e013      	b.n	8000c26 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	80fb      	strh	r3, [r7, #6]
 8000c02:	e00a      	b.n	8000c1a <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000c04:	f107 010c 	add.w	r1, r7, #12
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <ST7735_FillRectangle+0xe4>)
 8000c10:	f001 fb03 	bl	800221a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	80fb      	strh	r3, [r7, #6]
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f1      	bne.n	8000c04 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8000c20:	88bb      	ldrh	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	80bb      	strh	r3, [r7, #4]
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1e8      	bne.n	8000bfe <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8000c2c:	f7ff fdde 	bl	80007ec <ST7735_Unselect>
 8000c30:	e000      	b.n	8000c34 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c32:	bf00      	nop
}
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd90      	pop	{r4, r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	20000030 	.word	0x20000030

08000c44 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	2100      	movs	r1, #0
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff ff7f 	bl	8000b5c <ST7735_FillRectangle>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca6:	2007      	movs	r0, #7
 8000ca8:	f000 fa64 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a28      	ldr	r2, [pc, #160]	; (8000d78 <HAL_SPI_MspInit+0xc0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d14a      	bne.n	8000d70 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000d3e:	2307      	movs	r3, #7
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <HAL_SPI_MspInit+0xc8>)
 8000d4a:	f000 fa47 	bl	80011dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d60:	2305      	movs	r3, #5
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <HAL_SPI_MspInit+0xcc>)
 8000d6c:	f000 fa36 	bl	80011dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40003800 	.word	0x40003800
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020800 	.word	0x40020800
 8000d84:	40020400 	.word	0x40020400

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_UART_MspInit+0x84>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12b      	bne.n	8000e02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000de2:	230c      	movs	r3, #12
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df2:	2307      	movs	r3, #7
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_UART_MspInit+0x8c>)
 8000dfe:	f000 f9ed 	bl	80011dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f890 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eba:	f7ff ffd7 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f001 fe7d 	bl	8002bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fb1d 	bl	8000500 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ed4:	08003434 	.word	0x08003434
  ldr r2, =_sbss
 8000ed8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000edc:	200000d0 	.word	0x200000d0

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f931 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fea6 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f93b 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 f911 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000010 	.word	0x20000010
 8000f84:	2000000c 	.word	0x2000000c

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000010 	.word	0x20000010
 8000fac:	200000cc 	.word	0x200000cc

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200000cc 	.word	0x200000cc

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000010 	.word	0x20000010

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff47 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff5c 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffb0 	bl	8001130 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e165      	b.n	80014c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8154 	bne.w	80014be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d005      	beq.n	800122e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122a:	2b02      	cmp	r3, #2
 800122c:	d130      	bne.n	8001290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 0201 	and.w	r2, r3, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b03      	cmp	r3, #3
 800129a:	d017      	beq.n	80012cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80ae 	beq.w	80014be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_GPIO_Init+0x300>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a5c      	ldr	r2, [pc, #368]	; (80014dc <HAL_GPIO_Init+0x300>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <HAL_GPIO_Init+0x300>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137e:	4a58      	ldr	r2, [pc, #352]	; (80014e0 <HAL_GPIO_Init+0x304>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4f      	ldr	r2, [pc, #316]	; (80014e4 <HAL_GPIO_Init+0x308>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x21a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4e      	ldr	r2, [pc, #312]	; (80014e8 <HAL_GPIO_Init+0x30c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x216>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4d      	ldr	r2, [pc, #308]	; (80014ec <HAL_GPIO_Init+0x310>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x212>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <HAL_GPIO_Init+0x314>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x20e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4b      	ldr	r2, [pc, #300]	; (80014f4 <HAL_GPIO_Init+0x318>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x20a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4a      	ldr	r2, [pc, #296]	; (80014f8 <HAL_GPIO_Init+0x31c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x206>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a49      	ldr	r2, [pc, #292]	; (80014fc <HAL_GPIO_Init+0x320>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x202>
 80013da:	2306      	movs	r3, #6
 80013dc:	e00c      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013de:	2307      	movs	r3, #7
 80013e0:	e00a      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e008      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e004      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013f6:	2300      	movs	r3, #0
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f002 0203 	and.w	r2, r2, #3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4093      	lsls	r3, r2
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001408:	4935      	ldr	r1, [pc, #212]	; (80014e0 <HAL_GPIO_Init+0x304>)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143a:	4a31      	ldr	r2, [pc, #196]	; (8001500 <HAL_GPIO_Init+0x324>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001440:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001464:	4a26      	ldr	r2, [pc, #152]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <HAL_GPIO_Init+0x324>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148e:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b8:	4a11      	ldr	r2, [pc, #68]	; (8001500 <HAL_GPIO_Init+0x324>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	f67f ae96 	bls.w	80011f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40021400 	.word	0x40021400
 80014fc:	40021800 	.word	0x40021800
 8001500:	40013c00 	.word	0x40013c00

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001520:	e003      	b.n	800152a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0cc      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800154c:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d90c      	bls.n	8001574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b65      	ldr	r3, [pc, #404]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b63      	ldr	r3, [pc, #396]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0b8      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d020      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800158c:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a58      	ldr	r2, [pc, #352]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b0:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	494d      	ldr	r1, [pc, #308]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d044      	beq.n	8001658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d119      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e07f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d003      	beq.n	80015f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e06f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e067      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f023 0203 	bic.w	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4934      	ldr	r1, [pc, #208]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001628:	f7ff fcc2 	bl	8000fb0 <HAL_GetTick>
 800162c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	e00a      	b.n	8001646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001630:	f7ff fcbe 	bl	8000fb0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e04f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 020c 	and.w	r2, r3, #12
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	429a      	cmp	r2, r3
 8001656:	d1eb      	bne.n	8001630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d20c      	bcs.n	8001680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e032      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4916      	ldr	r1, [pc, #88]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	490e      	ldr	r1, [pc, #56]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016be:	f000 f855 	bl	800176c <HAL_RCC_GetSysClockFreq>
 80016c2:	4602      	mov	r2, r0
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	490a      	ldr	r1, [pc, #40]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	5ccb      	ldrb	r3, [r1, r3]
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RCC_ClockConfig+0x1c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fc22 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00
 80016f4:	40023800 	.word	0x40023800
 80016f8:	0800340c 	.word	0x0800340c
 80016fc:	20000008 	.word	0x20000008
 8001700:	2000000c 	.word	0x2000000c

08001704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_RCC_GetHCLKFreq+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008

0800171c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001720:	f7ff fff0 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	0a9b      	lsrs	r3, r3, #10
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	4903      	ldr	r1, [pc, #12]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	0800341c 	.word	0x0800341c

08001744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001748:	f7ff ffdc 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 800174c:	4602      	mov	r2, r0
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	0b5b      	lsrs	r3, r3, #13
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	4903      	ldr	r1, [pc, #12]	; (8001768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800175a:	5ccb      	ldrb	r3, [r1, r3]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	0800341c 	.word	0x0800341c

0800176c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001770:	b0ae      	sub	sp, #184	; 0xb8
 8001772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001792:	4bcb      	ldr	r3, [pc, #812]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b0c      	cmp	r3, #12
 800179c:	f200 8206 	bhi.w	8001bac <HAL_RCC_GetSysClockFreq+0x440>
 80017a0:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017dd 	.word	0x080017dd
 80017ac:	08001bad 	.word	0x08001bad
 80017b0:	08001bad 	.word	0x08001bad
 80017b4:	08001bad 	.word	0x08001bad
 80017b8:	080017e5 	.word	0x080017e5
 80017bc:	08001bad 	.word	0x08001bad
 80017c0:	08001bad 	.word	0x08001bad
 80017c4:	08001bad 	.word	0x08001bad
 80017c8:	080017ed 	.word	0x080017ed
 80017cc:	08001bad 	.word	0x08001bad
 80017d0:	08001bad 	.word	0x08001bad
 80017d4:	08001bad 	.word	0x08001bad
 80017d8:	080019dd 	.word	0x080019dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4bb9      	ldr	r3, [pc, #740]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x358>)
 80017de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80017e2:	e1e7      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e4:	4bb8      	ldr	r3, [pc, #736]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017ea:	e1e3      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ec:	4bb4      	ldr	r3, [pc, #720]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f8:	4bb1      	ldr	r3, [pc, #708]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d071      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001804:	4bae      	ldr	r3, [pc, #696]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	2200      	movs	r2, #0
 800180c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001810:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001826:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800182a:	4622      	mov	r2, r4
 800182c:	462b      	mov	r3, r5
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0159      	lsls	r1, r3, #5
 8001838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183c:	0150      	lsls	r0, r2, #5
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4621      	mov	r1, r4
 8001844:	1a51      	subs	r1, r2, r1
 8001846:	6439      	str	r1, [r7, #64]	; 0x40
 8001848:	4629      	mov	r1, r5
 800184a:	eb63 0301 	sbc.w	r3, r3, r1
 800184e:	647b      	str	r3, [r7, #68]	; 0x44
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800185c:	4649      	mov	r1, r9
 800185e:	018b      	lsls	r3, r1, #6
 8001860:	4641      	mov	r1, r8
 8001862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001866:	4641      	mov	r1, r8
 8001868:	018a      	lsls	r2, r1, #6
 800186a:	4641      	mov	r1, r8
 800186c:	1a51      	subs	r1, r2, r1
 800186e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001870:	4649      	mov	r1, r9
 8001872:	eb63 0301 	sbc.w	r3, r3, r1
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001884:	4649      	mov	r1, r9
 8001886:	00cb      	lsls	r3, r1, #3
 8001888:	4641      	mov	r1, r8
 800188a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800188e:	4641      	mov	r1, r8
 8001890:	00ca      	lsls	r2, r1, #3
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	4603      	mov	r3, r0
 8001898:	4622      	mov	r2, r4
 800189a:	189b      	adds	r3, r3, r2
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
 800189e:	462b      	mov	r3, r5
 80018a0:	460a      	mov	r2, r1
 80018a2:	eb42 0303 	adc.w	r3, r2, r3
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018b4:	4629      	mov	r1, r5
 80018b6:	024b      	lsls	r3, r1, #9
 80018b8:	4621      	mov	r1, r4
 80018ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018be:	4621      	mov	r1, r4
 80018c0:	024a      	lsls	r2, r1, #9
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80018d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80018d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80018d8:	f7fe fc94 	bl	8000204 <__aeabi_uldivmod>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4613      	mov	r3, r2
 80018e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018e6:	e067      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e8:	4b75      	ldr	r3, [pc, #468]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	2200      	movs	r2, #0
 80018f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80018f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001900:	67bb      	str	r3, [r7, #120]	; 0x78
 8001902:	2300      	movs	r3, #0
 8001904:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001906:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800190a:	4622      	mov	r2, r4
 800190c:	462b      	mov	r3, r5
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	0159      	lsls	r1, r3, #5
 8001918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191c:	0150      	lsls	r0, r2, #5
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4621      	mov	r1, r4
 8001924:	1a51      	subs	r1, r2, r1
 8001926:	62b9      	str	r1, [r7, #40]	; 0x28
 8001928:	4629      	mov	r1, r5
 800192a:	eb63 0301 	sbc.w	r3, r3, r1
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800193c:	4649      	mov	r1, r9
 800193e:	018b      	lsls	r3, r1, #6
 8001940:	4641      	mov	r1, r8
 8001942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001946:	4641      	mov	r1, r8
 8001948:	018a      	lsls	r2, r1, #6
 800194a:	4641      	mov	r1, r8
 800194c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001950:	4649      	mov	r1, r9
 8001952:	eb63 0b01 	sbc.w	fp, r3, r1
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001962:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800196a:	4692      	mov	sl, r2
 800196c:	469b      	mov	fp, r3
 800196e:	4623      	mov	r3, r4
 8001970:	eb1a 0303 	adds.w	r3, sl, r3
 8001974:	623b      	str	r3, [r7, #32]
 8001976:	462b      	mov	r3, r5
 8001978:	eb4b 0303 	adc.w	r3, fp, r3
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800198a:	4629      	mov	r1, r5
 800198c:	028b      	lsls	r3, r1, #10
 800198e:	4621      	mov	r1, r4
 8001990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001994:	4621      	mov	r1, r4
 8001996:	028a      	lsls	r2, r1, #10
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019a0:	2200      	movs	r2, #0
 80019a2:	673b      	str	r3, [r7, #112]	; 0x70
 80019a4:	677a      	str	r2, [r7, #116]	; 0x74
 80019a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80019aa:	f7fe fc2b 	bl	8000204 <__aeabi_uldivmod>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4613      	mov	r3, r2
 80019b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019b8:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	0c1b      	lsrs	r3, r3, #16
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	3301      	adds	r3, #1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80019ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019da:	e0eb      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019dc:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e8:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d06b      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f4:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	2200      	movs	r2, #0
 80019fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80019fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a06:	663b      	str	r3, [r7, #96]	; 0x60
 8001a08:	2300      	movs	r3, #0
 8001a0a:	667b      	str	r3, [r7, #100]	; 0x64
 8001a0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a10:	4622      	mov	r2, r4
 8001a12:	462b      	mov	r3, r5
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	0159      	lsls	r1, r3, #5
 8001a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a22:	0150      	lsls	r0, r2, #5
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4621      	mov	r1, r4
 8001a2a:	1a51      	subs	r1, r2, r1
 8001a2c:	61b9      	str	r1, [r7, #24]
 8001a2e:	4629      	mov	r1, r5
 8001a30:	eb63 0301 	sbc.w	r3, r3, r1
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a42:	4659      	mov	r1, fp
 8001a44:	018b      	lsls	r3, r1, #6
 8001a46:	4651      	mov	r1, sl
 8001a48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a4c:	4651      	mov	r1, sl
 8001a4e:	018a      	lsls	r2, r1, #6
 8001a50:	4651      	mov	r1, sl
 8001a52:	ebb2 0801 	subs.w	r8, r2, r1
 8001a56:	4659      	mov	r1, fp
 8001a58:	eb63 0901 	sbc.w	r9, r3, r1
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a70:	4690      	mov	r8, r2
 8001a72:	4699      	mov	r9, r3
 8001a74:	4623      	mov	r3, r4
 8001a76:	eb18 0303 	adds.w	r3, r8, r3
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	462b      	mov	r3, r5
 8001a7e:	eb49 0303 	adc.w	r3, r9, r3
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a90:	4629      	mov	r1, r5
 8001a92:	024b      	lsls	r3, r1, #9
 8001a94:	4621      	mov	r1, r4
 8001a96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	024a      	lsls	r2, r1, #9
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aaa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001aac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ab0:	f7fe fba8 	bl	8000204 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001abe:	e065      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x420>
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	00f42400 	.word	0x00f42400
 8001ac8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001acc:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	099b      	lsrs	r3, r3, #6
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001adc:	653b      	str	r3, [r7, #80]	; 0x50
 8001ade:	2300      	movs	r3, #0
 8001ae0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ae2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001ae6:	4642      	mov	r2, r8
 8001ae8:	464b      	mov	r3, r9
 8001aea:	f04f 0000 	mov.w	r0, #0
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	0159      	lsls	r1, r3, #5
 8001af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af8:	0150      	lsls	r0, r2, #5
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4641      	mov	r1, r8
 8001b00:	1a51      	subs	r1, r2, r1
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	4649      	mov	r1, r9
 8001b06:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b18:	4659      	mov	r1, fp
 8001b1a:	018b      	lsls	r3, r1, #6
 8001b1c:	4651      	mov	r1, sl
 8001b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b22:	4651      	mov	r1, sl
 8001b24:	018a      	lsls	r2, r1, #6
 8001b26:	4651      	mov	r1, sl
 8001b28:	1a54      	subs	r4, r2, r1
 8001b2a:	4659      	mov	r1, fp
 8001b2c:	eb63 0501 	sbc.w	r5, r3, r1
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	00eb      	lsls	r3, r5, #3
 8001b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b3e:	00e2      	lsls	r2, r4, #3
 8001b40:	4614      	mov	r4, r2
 8001b42:	461d      	mov	r5, r3
 8001b44:	4643      	mov	r3, r8
 8001b46:	18e3      	adds	r3, r4, r3
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	eb45 0303 	adc.w	r3, r5, r3
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	028b      	lsls	r3, r1, #10
 8001b62:	4621      	mov	r1, r4
 8001b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b68:	4621      	mov	r1, r4
 8001b6a:	028a      	lsls	r2, r1, #10
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b74:	2200      	movs	r2, #0
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b78:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b7e:	f7fe fb41 	bl	8000204 <__aeabi_uldivmod>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4613      	mov	r3, r2
 8001b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	0f1b      	lsrs	r3, r3, #28
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001baa:	e003      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	37b8      	adds	r7, #184	; 0xb8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	00f42400 	.word	0x00f42400

08001bcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e28d      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8083 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bec:	4b94      	ldr	r3, [pc, #592]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d019      	beq.n	8001c2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bf8:	4b91      	ldr	r3, [pc, #580]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c04:	4b8e      	ldr	r3, [pc, #568]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c10:	d00c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c12:	4b8b      	ldr	r3, [pc, #556]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d112      	bne.n	8001c44 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1e:	4b88      	ldr	r3, [pc, #544]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c2a:	d10b      	bne.n	8001c44 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	4b84      	ldr	r3, [pc, #528]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d05b      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x124>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d157      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e25a      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d106      	bne.n	8001c5c <HAL_RCC_OscConfig+0x90>
 8001c4e:	4b7c      	ldr	r3, [pc, #496]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7b      	ldr	r2, [pc, #492]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e01d      	b.n	8001c98 <HAL_RCC_OscConfig+0xcc>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0xb4>
 8001c66:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a75      	ldr	r2, [pc, #468]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b73      	ldr	r3, [pc, #460]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a72      	ldr	r2, [pc, #456]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0xcc>
 8001c80:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6e      	ldr	r2, [pc, #440]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b6c      	ldr	r3, [pc, #432]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6b      	ldr	r2, [pc, #428]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f986 	bl	8000fb0 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f982 	bl	8000fb0 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e21f      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xdc>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f972 	bl	8000fb0 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f96e 	bl	8000fb0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e20b      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	4b57      	ldr	r3, [pc, #348]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x104>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d06f      	beq.n	8001dde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cfe:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d017      	beq.n	8001d3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d0a:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d105      	bne.n	8001d22 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d16:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d11c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_RCC_OscConfig+0x186>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e1d3      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4937      	ldr	r1, [pc, #220]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	e03a      	b.n	8001dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_RCC_OscConfig+0x278>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f91b 	bl	8000fb0 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff f917 	bl	8000fb0 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1b4      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4925      	ldr	r1, [pc, #148]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_RCC_OscConfig+0x278>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff f8fa 	bl	8000fb0 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f8f6 	bl	8000fb0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e193      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d036      	beq.n	8001e58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d016      	beq.n	8001e20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_RCC_OscConfig+0x27c>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f8da 	bl	8000fb0 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff f8d6 	bl	8000fb0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e173      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x234>
 8001e1e:	e01b      	b.n	8001e58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RCC_OscConfig+0x27c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff f8c3 	bl	8000fb0 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	e00e      	b.n	8001e4c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f8bf 	bl	8000fb0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d907      	bls.n	8001e4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e15c      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 8001e40:	40023800 	.word	0x40023800
 8001e44:	42470000 	.word	0x42470000
 8001e48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	4b8a      	ldr	r3, [pc, #552]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ea      	bne.n	8001e2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8097 	beq.w	8001f94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b83      	ldr	r3, [pc, #524]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10f      	bne.n	8001e96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b7f      	ldr	r3, [pc, #508]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a7e      	ldr	r2, [pc, #504]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b7c      	ldr	r3, [pc, #496]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e92:	2301      	movs	r3, #1
 8001e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	4b79      	ldr	r3, [pc, #484]	; (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d118      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea2:	4b76      	ldr	r3, [pc, #472]	; (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a75      	ldr	r2, [pc, #468]	; (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7ff f87f 	bl	8000fb0 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb6:	f7ff f87b 	bl	8000fb0 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e118      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec8:	4b6c      	ldr	r3, [pc, #432]	; (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x31e>
 8001edc:	4b66      	ldr	r3, [pc, #408]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	4a65      	ldr	r2, [pc, #404]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee8:	e01c      	b.n	8001f24 <HAL_RCC_OscConfig+0x358>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x340>
 8001ef2:	4b61      	ldr	r3, [pc, #388]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	4a60      	ldr	r2, [pc, #384]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6713      	str	r3, [r2, #112]	; 0x70
 8001efe:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f02:	4a5d      	ldr	r2, [pc, #372]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0x358>
 8001f0c:	4b5a      	ldr	r3, [pc, #360]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	4a59      	ldr	r2, [pc, #356]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
 8001f18:	4b57      	ldr	r3, [pc, #348]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	4a56      	ldr	r2, [pc, #344]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d015      	beq.n	8001f58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7ff f840 	bl	8000fb0 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f34:	f7ff f83c 	bl	8000fb0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e0d7      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4a:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0ee      	beq.n	8001f34 <HAL_RCC_OscConfig+0x368>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff f82a 	bl	8000fb0 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7ff f826 	bl	8000fb0 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e0c1      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f76:	4b40      	ldr	r3, [pc, #256]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ee      	bne.n	8001f60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a3a      	ldr	r2, [pc, #232]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80ad 	beq.w	80020f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f9e:	4b36      	ldr	r3, [pc, #216]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d060      	beq.n	800206c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d145      	bne.n	800203e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_RCC_OscConfig+0x4b4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fffa 	bl	8000fb0 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe fff6 	bl	8000fb0 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e093      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	071b      	lsls	r3, r3, #28
 800200a:	491b      	ldr	r1, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x4b4>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7fe ffcb 	bl	8000fb0 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201e:	f7fe ffc7 	bl	8000fb0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e064      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x452>
 800203c:	e05c      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_RCC_OscConfig+0x4b4>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe ffb4 	bl	8000fb0 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe ffb0 	bl	8000fb0 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e04d      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x480>
 800206a:	e045      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e040      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 8002078:	40023800 	.word	0x40023800
 800207c:	40007000 	.word	0x40007000
 8002080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002084:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <HAL_RCC_OscConfig+0x538>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d030      	beq.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d129      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d122      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020b4:	4013      	ands	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020bc:	4293      	cmp	r3, r2
 80020be:	d119      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3b01      	subs	r3, #1
 80020ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10f      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e07b      	b.n	8002212 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	2b00      	cmp	r3, #0
 8002120:	d108      	bne.n	8002134 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800212a:	d009      	beq.n	8002140 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
 8002132:	e005      	b.n	8002140 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe fdac 	bl	8000cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002176:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c4:	ea42 0103 	orr.w	r1, r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	f003 0104 	and.w	r1, r3, #4
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	f003 0210 	and.w	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002200:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b088      	sub	sp, #32
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_SPI_Transmit+0x22>
 8002238:	2302      	movs	r3, #2
 800223a:	e126      	b.n	800248a <HAL_SPI_Transmit+0x270>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002244:	f7fe feb4 	bl	8000fb0 <HAL_GetTick>
 8002248:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d002      	beq.n	8002260 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800225a:	2302      	movs	r3, #2
 800225c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800225e:	e10b      	b.n	8002478 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_SPI_Transmit+0x52>
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002270:	e102      	b.n	8002478 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2203      	movs	r2, #3
 8002276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	88fa      	ldrh	r2, [r7, #6]
 800228a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b8:	d10f      	bne.n	80022da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d007      	beq.n	80022f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002300:	d14b      	bne.n	800239a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_SPI_Transmit+0xf6>
 800230a:	8afb      	ldrh	r3, [r7, #22]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d13e      	bne.n	800238e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	881a      	ldrh	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	1c9a      	adds	r2, r3, #2
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002334:	e02b      	b.n	800238e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b02      	cmp	r3, #2
 8002342:	d112      	bne.n	800236a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	881a      	ldrh	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	1c9a      	adds	r2, r3, #2
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	86da      	strh	r2, [r3, #54]	; 0x36
 8002368:	e011      	b.n	800238e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800236a:	f7fe fe21 	bl	8000fb0 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d803      	bhi.n	8002382 <HAL_SPI_Transmit+0x168>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d102      	bne.n	8002388 <HAL_SPI_Transmit+0x16e>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800238c:	e074      	b.n	8002478 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ce      	bne.n	8002336 <HAL_SPI_Transmit+0x11c>
 8002398:	e04c      	b.n	8002434 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_SPI_Transmit+0x18e>
 80023a2:	8afb      	ldrh	r3, [r7, #22]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d140      	bne.n	800242a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	330c      	adds	r3, #12
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023ce:	e02c      	b.n	800242a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d113      	bne.n	8002406 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	330c      	adds	r3, #12
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	86da      	strh	r2, [r3, #54]	; 0x36
 8002404:	e011      	b.n	800242a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002406:	f7fe fdd3 	bl	8000fb0 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d803      	bhi.n	800241e <HAL_SPI_Transmit+0x204>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d102      	bne.n	8002424 <HAL_SPI_Transmit+0x20a>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002428:	e026      	b.n	8002478 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1cd      	bne.n	80023d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	6839      	ldr	r1, [r7, #0]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f8b3 	bl	80025a4 <SPI_EndRxTxTransaction>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	77fb      	strb	r3, [r7, #31]
 8002474:	e000      	b.n	8002478 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002476:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002488:	7ffb      	ldrb	r3, [r7, #31]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024a4:	f7fe fd84 	bl	8000fb0 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024b4:	f7fe fd7c 	bl	8000fb0 <HAL_GetTick>
 80024b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	015b      	lsls	r3, r3, #5
 80024c0:	0d1b      	lsrs	r3, r3, #20
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024ca:	e054      	b.n	8002576 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d050      	beq.n	8002576 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024d4:	f7fe fd6c 	bl	8000fb0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d902      	bls.n	80024ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d13d      	bne.n	8002566 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002502:	d111      	bne.n	8002528 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800250c:	d004      	beq.n	8002518 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002516:	d107      	bne.n	8002528 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002530:	d10f      	bne.n	8002552 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e017      	b.n	8002596 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3b01      	subs	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4013      	ands	r3, r2
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	429a      	cmp	r2, r3
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	429a      	cmp	r2, r3
 8002592:	d19b      	bne.n	80024cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000008 	.word	0x20000008

080025a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <SPI_EndRxTxTransaction+0x7c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1b      	ldr	r2, [pc, #108]	; (8002624 <SPI_EndRxTxTransaction+0x80>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0d5b      	lsrs	r3, r3, #21
 80025bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ce:	d112      	bne.n	80025f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff ff5a 	bl	8002494 <SPI_WaitFlagStateUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d016      	beq.n	8002614 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e00f      	b.n	8002616 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3b01      	subs	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260c:	2b80      	cmp	r3, #128	; 0x80
 800260e:	d0f2      	beq.n	80025f6 <SPI_EndRxTxTransaction+0x52>
 8002610:	e000      	b.n	8002614 <SPI_EndRxTxTransaction+0x70>
        break;
 8002612:	bf00      	nop
  }

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000008 	.word	0x20000008
 8002624:	165e9f81 	.word	0x165e9f81

08002628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e03f      	b.n	80026ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fb9a 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2224      	movs	r2, #36	; 0x24
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800266a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f829 	bl	80026c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c8:	b0c0      	sub	sp, #256	; 0x100
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	68d9      	ldr	r1, [r3, #12]
 80026e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	ea40 0301 	orr.w	r3, r0, r1
 80026ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	431a      	orrs	r2, r3
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800271c:	f021 010c 	bic.w	r1, r1, #12
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800272a:	430b      	orrs	r3, r1
 800272c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273e:	6999      	ldr	r1, [r3, #24]
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	ea40 0301 	orr.w	r3, r0, r1
 800274a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b8f      	ldr	r3, [pc, #572]	; (8002990 <UART_SetConfig+0x2cc>)
 8002754:	429a      	cmp	r2, r3
 8002756:	d005      	beq.n	8002764 <UART_SetConfig+0xa0>
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b8d      	ldr	r3, [pc, #564]	; (8002994 <UART_SetConfig+0x2d0>)
 8002760:	429a      	cmp	r2, r3
 8002762:	d104      	bne.n	800276e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002764:	f7fe ffee 	bl	8001744 <HAL_RCC_GetPCLK2Freq>
 8002768:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800276c:	e003      	b.n	8002776 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800276e:	f7fe ffd5 	bl	800171c <HAL_RCC_GetPCLK1Freq>
 8002772:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002780:	f040 810c 	bne.w	800299c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002788:	2200      	movs	r2, #0
 800278a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800278e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002792:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002796:	4622      	mov	r2, r4
 8002798:	462b      	mov	r3, r5
 800279a:	1891      	adds	r1, r2, r2
 800279c:	65b9      	str	r1, [r7, #88]	; 0x58
 800279e:	415b      	adcs	r3, r3
 80027a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027a6:	4621      	mov	r1, r4
 80027a8:	eb12 0801 	adds.w	r8, r2, r1
 80027ac:	4629      	mov	r1, r5
 80027ae:	eb43 0901 	adc.w	r9, r3, r1
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c6:	4690      	mov	r8, r2
 80027c8:	4699      	mov	r9, r3
 80027ca:	4623      	mov	r3, r4
 80027cc:	eb18 0303 	adds.w	r3, r8, r3
 80027d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027d4:	462b      	mov	r3, r5
 80027d6:	eb49 0303 	adc.w	r3, r9, r3
 80027da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027f2:	460b      	mov	r3, r1
 80027f4:	18db      	adds	r3, r3, r3
 80027f6:	653b      	str	r3, [r7, #80]	; 0x50
 80027f8:	4613      	mov	r3, r2
 80027fa:	eb42 0303 	adc.w	r3, r2, r3
 80027fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002800:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002804:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002808:	f7fd fcfc 	bl	8000204 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4b61      	ldr	r3, [pc, #388]	; (8002998 <UART_SetConfig+0x2d4>)
 8002812:	fba3 2302 	umull	r2, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	011c      	lsls	r4, r3, #4
 800281a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800281e:	2200      	movs	r2, #0
 8002820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002824:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002828:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800282c:	4642      	mov	r2, r8
 800282e:	464b      	mov	r3, r9
 8002830:	1891      	adds	r1, r2, r2
 8002832:	64b9      	str	r1, [r7, #72]	; 0x48
 8002834:	415b      	adcs	r3, r3
 8002836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002838:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800283c:	4641      	mov	r1, r8
 800283e:	eb12 0a01 	adds.w	sl, r2, r1
 8002842:	4649      	mov	r1, r9
 8002844:	eb43 0b01 	adc.w	fp, r3, r1
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002854:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800285c:	4692      	mov	sl, r2
 800285e:	469b      	mov	fp, r3
 8002860:	4643      	mov	r3, r8
 8002862:	eb1a 0303 	adds.w	r3, sl, r3
 8002866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800286a:	464b      	mov	r3, r9
 800286c:	eb4b 0303 	adc.w	r3, fp, r3
 8002870:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002880:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002884:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002888:	460b      	mov	r3, r1
 800288a:	18db      	adds	r3, r3, r3
 800288c:	643b      	str	r3, [r7, #64]	; 0x40
 800288e:	4613      	mov	r3, r2
 8002890:	eb42 0303 	adc.w	r3, r2, r3
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
 8002896:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800289a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800289e:	f7fd fcb1 	bl	8000204 <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <UART_SetConfig+0x2d4>)
 80028aa:	fba3 2301 	umull	r2, r3, r3, r1
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2264      	movs	r2, #100	; 0x64
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	1acb      	subs	r3, r1, r3
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028be:	4b36      	ldr	r3, [pc, #216]	; (8002998 <UART_SetConfig+0x2d4>)
 80028c0:	fba3 2302 	umull	r2, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028cc:	441c      	add	r4, r3
 80028ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028e0:	4642      	mov	r2, r8
 80028e2:	464b      	mov	r3, r9
 80028e4:	1891      	adds	r1, r2, r2
 80028e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80028e8:	415b      	adcs	r3, r3
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028f0:	4641      	mov	r1, r8
 80028f2:	1851      	adds	r1, r2, r1
 80028f4:	6339      	str	r1, [r7, #48]	; 0x30
 80028f6:	4649      	mov	r1, r9
 80028f8:	414b      	adcs	r3, r1
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002908:	4659      	mov	r1, fp
 800290a:	00cb      	lsls	r3, r1, #3
 800290c:	4651      	mov	r1, sl
 800290e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002912:	4651      	mov	r1, sl
 8002914:	00ca      	lsls	r2, r1, #3
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	4603      	mov	r3, r0
 800291c:	4642      	mov	r2, r8
 800291e:	189b      	adds	r3, r3, r2
 8002920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002924:	464b      	mov	r3, r9
 8002926:	460a      	mov	r2, r1
 8002928:	eb42 0303 	adc.w	r3, r2, r3
 800292c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800293c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002940:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002944:	460b      	mov	r3, r1
 8002946:	18db      	adds	r3, r3, r3
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 800294a:	4613      	mov	r3, r2
 800294c:	eb42 0303 	adc.w	r3, r2, r3
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002952:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002956:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800295a:	f7fd fc53 	bl	8000204 <__aeabi_uldivmod>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <UART_SetConfig+0x2d4>)
 8002964:	fba3 1302 	umull	r1, r3, r3, r2
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	2164      	movs	r1, #100	; 0x64
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	3332      	adds	r3, #50	; 0x32
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <UART_SetConfig+0x2d4>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	f003 0207 	and.w	r2, r3, #7
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4422      	add	r2, r4
 800298a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800298c:	e106      	b.n	8002b9c <UART_SetConfig+0x4d8>
 800298e:	bf00      	nop
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800299c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029a0:	2200      	movs	r2, #0
 80029a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029ae:	4642      	mov	r2, r8
 80029b0:	464b      	mov	r3, r9
 80029b2:	1891      	adds	r1, r2, r2
 80029b4:	6239      	str	r1, [r7, #32]
 80029b6:	415b      	adcs	r3, r3
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029be:	4641      	mov	r1, r8
 80029c0:	1854      	adds	r4, r2, r1
 80029c2:	4649      	mov	r1, r9
 80029c4:	eb43 0501 	adc.w	r5, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	00eb      	lsls	r3, r5, #3
 80029d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d6:	00e2      	lsls	r2, r4, #3
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	4643      	mov	r3, r8
 80029de:	18e3      	adds	r3, r4, r3
 80029e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029e4:	464b      	mov	r3, r9
 80029e6:	eb45 0303 	adc.w	r3, r5, r3
 80029ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	008b      	lsls	r3, r1, #2
 8002a0e:	4621      	mov	r1, r4
 8002a10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a14:	4621      	mov	r1, r4
 8002a16:	008a      	lsls	r2, r1, #2
 8002a18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a1c:	f7fd fbf2 	bl	8000204 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4b60      	ldr	r3, [pc, #384]	; (8002ba8 <UART_SetConfig+0x4e4>)
 8002a26:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	011c      	lsls	r4, r3, #4
 8002a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a40:	4642      	mov	r2, r8
 8002a42:	464b      	mov	r3, r9
 8002a44:	1891      	adds	r1, r2, r2
 8002a46:	61b9      	str	r1, [r7, #24]
 8002a48:	415b      	adcs	r3, r3
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a50:	4641      	mov	r1, r8
 8002a52:	1851      	adds	r1, r2, r1
 8002a54:	6139      	str	r1, [r7, #16]
 8002a56:	4649      	mov	r1, r9
 8002a58:	414b      	adcs	r3, r1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a68:	4659      	mov	r1, fp
 8002a6a:	00cb      	lsls	r3, r1, #3
 8002a6c:	4651      	mov	r1, sl
 8002a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a72:	4651      	mov	r1, sl
 8002a74:	00ca      	lsls	r2, r1, #3
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	189b      	adds	r3, r3, r2
 8002a80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a84:	464b      	mov	r3, r9
 8002a86:	460a      	mov	r2, r1
 8002a88:	eb42 0303 	adc.w	r3, r2, r3
 8002a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002aa8:	4649      	mov	r1, r9
 8002aaa:	008b      	lsls	r3, r1, #2
 8002aac:	4641      	mov	r1, r8
 8002aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ab2:	4641      	mov	r1, r8
 8002ab4:	008a      	lsls	r2, r1, #2
 8002ab6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002aba:	f7fd fba3 	bl	8000204 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <UART_SetConfig+0x4e4>)
 8002ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2264      	movs	r2, #100	; 0x64
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	1acb      	subs	r3, r1, r3
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	3332      	adds	r3, #50	; 0x32
 8002ad8:	4a33      	ldr	r2, [pc, #204]	; (8002ba8 <UART_SetConfig+0x4e4>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae4:	441c      	add	r4, r3
 8002ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aea:	2200      	movs	r2, #0
 8002aec:	673b      	str	r3, [r7, #112]	; 0x70
 8002aee:	677a      	str	r2, [r7, #116]	; 0x74
 8002af0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002af4:	4642      	mov	r2, r8
 8002af6:	464b      	mov	r3, r9
 8002af8:	1891      	adds	r1, r2, r2
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	415b      	adcs	r3, r3
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b04:	4641      	mov	r1, r8
 8002b06:	1851      	adds	r1, r2, r1
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	414b      	adcs	r3, r1
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b1c:	4659      	mov	r1, fp
 8002b1e:	00cb      	lsls	r3, r1, #3
 8002b20:	4651      	mov	r1, sl
 8002b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b26:	4651      	mov	r1, sl
 8002b28:	00ca      	lsls	r2, r1, #3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4642      	mov	r2, r8
 8002b32:	189b      	adds	r3, r3, r2
 8002b34:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b36:	464b      	mov	r3, r9
 8002b38:	460a      	mov	r2, r1
 8002b3a:	eb42 0303 	adc.w	r3, r2, r3
 8002b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	663b      	str	r3, [r7, #96]	; 0x60
 8002b4a:	667a      	str	r2, [r7, #100]	; 0x64
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b58:	4649      	mov	r1, r9
 8002b5a:	008b      	lsls	r3, r1, #2
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b62:	4641      	mov	r1, r8
 8002b64:	008a      	lsls	r2, r1, #2
 8002b66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b6a:	f7fd fb4b 	bl	8000204 <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <UART_SetConfig+0x4e4>)
 8002b74:	fba3 1302 	umull	r1, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	2164      	movs	r1, #100	; 0x64
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	3332      	adds	r3, #50	; 0x32
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <UART_SetConfig+0x4e4>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4422      	add	r2, r4
 8002b9a:	609a      	str	r2, [r3, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba8:	51eb851f 	.word	0x51eb851f

08002bac <memset>:
 8002bac:	4402      	add	r2, r0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <memset+0xa>
 8002bb4:	4770      	bx	lr
 8002bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bba:	e7f9      	b.n	8002bb0 <memset+0x4>

08002bbc <__libc_init_array>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	4d0d      	ldr	r5, [pc, #52]	; (8002bf4 <__libc_init_array+0x38>)
 8002bc0:	4c0d      	ldr	r4, [pc, #52]	; (8002bf8 <__libc_init_array+0x3c>)
 8002bc2:	1b64      	subs	r4, r4, r5
 8002bc4:	10a4      	asrs	r4, r4, #2
 8002bc6:	2600      	movs	r6, #0
 8002bc8:	42a6      	cmp	r6, r4
 8002bca:	d109      	bne.n	8002be0 <__libc_init_array+0x24>
 8002bcc:	4d0b      	ldr	r5, [pc, #44]	; (8002bfc <__libc_init_array+0x40>)
 8002bce:	4c0c      	ldr	r4, [pc, #48]	; (8002c00 <__libc_init_array+0x44>)
 8002bd0:	f000 f818 	bl	8002c04 <_init>
 8002bd4:	1b64      	subs	r4, r4, r5
 8002bd6:	10a4      	asrs	r4, r4, #2
 8002bd8:	2600      	movs	r6, #0
 8002bda:	42a6      	cmp	r6, r4
 8002bdc:	d105      	bne.n	8002bea <__libc_init_array+0x2e>
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
 8002be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be4:	4798      	blx	r3
 8002be6:	3601      	adds	r6, #1
 8002be8:	e7ee      	b.n	8002bc8 <__libc_init_array+0xc>
 8002bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bee:	4798      	blx	r3
 8002bf0:	3601      	adds	r6, #1
 8002bf2:	e7f2      	b.n	8002bda <__libc_init_array+0x1e>
 8002bf4:	0800342c 	.word	0x0800342c
 8002bf8:	0800342c 	.word	0x0800342c
 8002bfc:	0800342c 	.word	0x0800342c
 8002c00:	08003430 	.word	0x08003430

08002c04 <_init>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr

08002c10 <_fini>:
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c12:	bf00      	nop
 8002c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c16:	bc08      	pop	{r3}
 8002c18:	469e      	mov	lr, r3
 8002c1a:	4770      	bx	lr
